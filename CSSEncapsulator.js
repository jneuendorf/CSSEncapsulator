// Generated by CoffeeScript 1.9.1
(function() {
  var randStr,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  randStr = function(len) {
    var chars, i, j, ref, text;
    if (len == null) {
      len = 16;
    }
    text = "";
    chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      text += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return text;
  };

  window.CSSEncapsulator = (function() {
    function CSSEncapsulator(root, css, prefix, apply) {
      if (css == null) {
        css = {};
      }
      if (prefix == null) {
        prefix = 16;
      }
      if (apply == null) {
        apply = true;
      }
      if (typeof jQuery !== "undefined" && root instanceof jQuery) {
        this.root = root[0];
      } else {
        this.root = root;
      }
      this.css = this.defineCSS(css);
      if (prefix != null) {
        while (true) {
          if (typeof prefix === "number") {
            this.prefix = randStr(prefix);
          } else if (typeof prefix === "string") {
            this.prefix = prefix;
          }
          if (!document.getElementById(this.prefix)) {
            break;
          }
        }
      }
      if (apply === true) {
        this.apply();
      }
    }

    CSSEncapsulator.prototype.apply = function() {

      /*
      css = 'h1 { background: red; }'
      head = document.head || document.getElementsByTagName('head')[0]
      style = document.createElement('style')
      
      style.type = 'text/css'
      if style.styleSheet
          style.styleSheet.cssText = css
      else
          style.appendChild(document.createTextNode(css))
      
      head.appendChild(style)
       */
      var css, head, j, key, len1, order, rules, style;
      this.root.id = this.prefix;
      rules = this.css.rules;
      order = this.css.order;
      css = "";
      for (j = 0, len1 = order.length; j < len1; j++) {
        key = order[j];
        css += "#" + this.prefix + " " + key + " { " + rules[key] + " }\n";
      }
      head = document.head || document.getElementsByTagName("head")[0];
      style = document.createElement("style");
      style.type = "text/css";
      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
      head.appendChild(style);
      return this;
    };

    CSSEncapsulator.prototype.defineCSS = function(data) {

      /*
      data is like:
      {
          body:
               * 1st body property:
              "font-family": "Arial"
               * child
              span:
                  color: "black"
                  "text-decoration": "underline"
               * 2nd body property:
              "font-size": "20pt"
               * child
              "div.class":
                  height: "20px"
                  ":hover":
                      height: "30px"
               * 3rd body property:
              "font-weight": "bold"
          "#main":
              float: left
          ".xy":
              color: red
      }
      all selectors are interpreted relative to this.root
      
      ====>
      
      [
          "body":                 "font-family: Arial; font-size: 20pt; font-weight: bold;"
          "body span":            "color: black; text-decoration: underline;"
          "body div.class":       "height: 20px;"
          "body div.class:hover": "height: 30px;"
          "#main":                "float: left;"
          ".xy":                  "color: red;"
      ]
       */
      var createSelectors, order, rules;
      createSelectors = function(prev, obj, res, order) {
        var defs, key, selector, val;
        defs = "";
        for (key in obj) {
          val = obj[key];
          if (typeof val === "string") {
            defs += key + ": " + val + "; ";
          } else {
            if (key[0] === ":") {
              selector = "" + prev + key;
            } else {
              selector = prev + " " + key;
            }
            order.push(selector);
            createSelectors(selector, val, res, order);
          }
        }
        if (prev.length > 0) {
          if (res[prev]) {
            res[prev] += defs.trim();
          } else {
            res[prev] = defs.trim();
          }
        }
        return obj;
      };
      rules = {};
      order = [];
      createSelectors("", data, rules, order);
      return {
        rules: rules,
        order: order
      };
    };

    return CSSEncapsulator;

  })();

  CSSEncapsulator.Error = (function(superClass) {
    extend(Error, superClass);

    function Error() {
      return Error.__super__.constructor.apply(this, arguments);
    }

    return Error;

  })(Error);

  describe("CSSEncapsulator", function() {
    var instance, loadingTime, start;
    start = Date.now();
    instance = new CSSEncapsulator(document.querySelector(".content"), {
      "span": {
        "color": "green",
        "font-weight": "bold",
        ":hover": {
          "color": "red"
        }
      },
      ".testclass": {
        "text-decoration": "underline"
      }
    }, 32);
    loadingTime = Date.now() - start;
    console.log(loadingTime + " ms,", instance);
    return it("constructor", function() {
      return console.log(3);
    });
  });

}).call(this);
