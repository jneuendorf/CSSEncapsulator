// Generated by CoffeeScript 1.9.1
(function() {
  var randStr,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  randStr = function(len) {
    var chars, i, j, ref, text;
    if (len == null) {
      len = 16;
    }
    text = "";
    chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    for (i = j = 0, ref = ~~len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      text += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return text;
  };


  /**
  * @class CSSEncapsulator
  *
  * @property root {HTMLElement}
  * @property identifier {String}
  * @property css {Object}
  * @property cssString {String}
  * @property styleSheet {HTMLStyleElement}
  *
  * @constructor
  * @param root {HTMLElement|jQuery}
  * @param css {Object|String}
  * @param identifier {Number|String}
  *
   */

  window.CSSEncapsulator = (function() {
    var CSS_COMMENT;

    CSSEncapsulator.CSS_COMMENT = CSS_COMMENT = "/* generated by CSSEncapsulator */\n";

    function CSSEncapsulator(root, css, identifier, apply) {
      if (css == null) {
        css = {};
      }
      if (identifier == null) {
        identifier = 16;
      }
      if (apply == null) {
        apply = true;
      }
      if (typeof jQuery !== "undefined" && root instanceof jQuery) {
        this.root = root[0];
      } else {
        this.root = root;
      }
      if (identifier != null) {
        while (true) {
          if (typeof identifier === "number") {
            this.identifier = randStr(identifier);
          } else if (typeof identifier === "string") {
            this.identifier = identifier;
          }
          if (!document.getElementById(this.identifier)) {
            break;
          }
        }
      }
      if (typeof css === "string") {
        this.css = null;
        this.cssString = css;
      } else {
        this.css = this.defineCSS(css);
        this.stringifyCSS();
      }
      this.styleSheet = null;
      if (apply === true) {
        this.apply();
      }
    }

    CSSEncapsulator.prototype.apply = function() {
      var head, style;
      if (this.cssString == null) {
        this.stringifyCSS();
      }
      head = document.head || document.getElementsByTagName("head")[0];
      style = document.createElement("style");
      style.type = "text/css";
      if (style.styleSheet) {
        style.styleSheet.cssText = CSS_COMMENT + this.cssString;
      } else {
        style.appendChild(document.createTextNode(CSS_COMMENT + this.cssString));
      }
      if (this.styleSheet != null) {
        head.removeChild(this.styleSheet);
      }
      head.appendChild(style);
      this.styleSheet = style;
      return this;
    };

    CSSEncapsulator.prototype.stringifyCSS = function() {
      var css, j, key, len1, order, rules;
      this.root.id = this.identifier;
      rules = this.css.rules;
      order = this.css.order;
      css = "";
      for (j = 0, len1 = order.length; j < len1; j++) {
        key = order[j];
        css += key + " { " + rules[key] + " }\n";
      }
      this.cssString = css;
      return this;
    };

    CSSEncapsulator.prototype.defineCSS = function(data) {

      /*
      data is like:
      {
          body:
               * 1st body property:
              "font-family": "Arial"
               * child
              span:
                  color: "black"
                  "text-decoration": "underline"
               * 2nd body property:
              "font-size": "20pt"
               * child
              "div.class":
                  height: "20px"
                  ":hover":
                      height: "30px"
               * 3rd body property:
              "font-weight": "bold"
          "#main":
              float: left
          ".xy":
              color: red
      }
      all selectors are interpreted relative to this.root
      
      ====>
      {
          "body":                 "font-family: Arial; font-size: 20pt; font-weight: bold;"
          "body span":            "color: black; text-decoration: underline;"
          "body div.class":       "height: 20px;"
          "body div.class:hover": "height: 30px;"
          "#main":                "float: left;"
          ".xy":                  "color: red;"
      }
       */
      var createSelectors, order, rules;
      createSelectors = function(prev, obj, res, order) {
        var defs, key, selector, val;
        defs = "";
        for (key in obj) {
          val = obj[key];
          if (typeof val === "string") {
            defs += key + ": " + val + "; ";
          } else {
            if (key[0] === ":") {
              selector = "" + prev + key;
            } else {
              selector = prev + " " + key;
            }
            order.push(selector);
            createSelectors(selector, val, res, order);
          }
        }
        if (res[prev]) {
          res[prev] += defs.trim();
        } else {
          res[prev] = defs.trim();
        }
        return obj;
      };
      rules = {};
      order = ["#" + this.identifier];
      createSelectors("#" + this.identifier, data, rules, order);
      return {
        rules: rules,
        order: order
      };
    };

    return CSSEncapsulator;

  })();

  CSSEncapsulator.Error = (function(superClass) {
    extend(Error, superClass);

    function Error() {
      return Error.__super__.constructor.apply(this, arguments);
    }

    return Error;

  })(Error);

}).call(this);
