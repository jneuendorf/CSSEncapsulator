// Generated by CoffeeScript 1.9.1
(function() {
  var randStr,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  randStr = function(len) {
    var chars, i, j, ref, text;
    if (len == null) {
      len = 16;
    }
    text = "";
    chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      text += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return text;
  };

  window.CSSEncapsulator = (function() {
    function CSSEncapsulator(root, css, prefix) {
      if (css == null) {
        css = {};
      }
      if (prefix == null) {
        prefix = 16;
      }
      if (typeof jQuery !== "undefined" && root instanceof jQuery) {
        this.root = root[0];
      } else {
        this.root = root;
      }
      this.css = this.defineCSS(css);
      if (prefix != null) {
        while (true) {
          if (typeof prefix === "number") {
            this.prefix = randStr(prefix);
          } else if (typeof prefix === "string") {
            this.prefix = prefix;
          }
          if (!document.getElementById(this.prefix)) {
            break;
          }
        }
      }
    }

    CSSEncapsulator.prototype.defineCSS = function(data) {

      /*
      data is like:
      {
          body:
               * 1st body property:
              "font-family": "Arial"
               * child
              span:
                  color: "black"
                  "text-decoration": "underline"
               * 2nd body property:
              "font-size": "20pt"
               * child
              "div.class":
                  height: "20px"
               * 3rd body property:
              "font-weight": "bold"
          "#main":
              float: left
          ".xy":
              color: red
      }
      all selectors are interpreted relative to this.root
       */
      var createSelectors, ruleSets;
      createSelectors = function(prev, obj, res) {
        if (res == null) {
          res = [];
        }
        return obj;
      };
      ruleSets = [];
      return createSelectors("", data, ruleSets);
    };

    return CSSEncapsulator;

  })();

  CSSEncapsulator.Error = (function(superClass) {
    extend(Error, superClass);

    function Error() {
      return Error.__super__.constructor.apply(this, arguments);
    }

    return Error;

  })(Error);

  describe("CSSEncapsulator", function() {
    var instance, loadingTime, start;
    start = Date.now();
    instance = new CSSEncapsulator(document.querySelector(".content"), {
      span: {
        color: green
      }
    }, 32);
    loadingTime = Date.now() - start;
    console.log(loadingTime + " ms,", instance);
    return it("constructor", function() {
      return console.log(3);
    });
  });

}).call(this);
